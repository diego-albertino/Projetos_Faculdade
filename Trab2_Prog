#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Livro {
    int id;
    char titulo[100];
    char autor[50];
    int anoPublicacao;
    int qtdade;
    int qtdisponivel;
    struct Livro *prox;
} Livro;

typedef struct Exemplar {
    int id;
    char titulo[100];
    char autor[50];
    int RGA;
    struct Exemplar *prox;
} Exemplar;

void busca_insere(int ident, char* title, char* author, int ano, int quantidade, Livro **lst) {
    Livro *p, *q, *nova;

    nova = (Livro *) malloc(sizeof (Livro));
    if (!nova) {
        exit(EXIT_FAILURE);
    }

    nova->id = ident;
    strncpy(nova->titulo, title, sizeof(nova->titulo));
    strncpy(nova->autor, author, sizeof(nova->autor));
    nova->anoPublicacao = ano;
    nova->qtdade = quantidade;
    nova->qtdisponivel = quantidade;
    nova->prox = NULL;

    if (*lst == NULL) {
        *lst = nova;
    } else {
        p = *lst;
        q = p->prox;

        while (q != NULL && q->id != ident) {
            p = q;
            q = q->prox;
        }

        if (q != NULL && q->id == ident) {
            q->qtdade++;
            q->qtdisponivel++;
            free(nova);  // Já que é uma duplicata, liberamos o novo nó.
        } else {
            nova->prox = NULL;
            p->prox = nova;
        }
    }
}

void busca_remove(int ident, Livro **lst) {
    Livro *p, *q;

    p = *lst;
    q = (*lst)->prox;



    // Encontra o livro na lista
    while (q != NULL && q->id != ident) {
        p = q;
        q = q->prox;
    }

    if (q != NULL && q->qtdade == q->qtdisponivel) {
        p->prox = q->prox;
        free(q);
        printf("Livro removido com sucesso.\n");
    }

    else{

        if(q->qtdade != q->qtdisponivel)
            printf("Livro está emprestado e não pode ser removido\n");

        else 
            printf("Livro não existe.\n");
    
    }
}



void emprestarLivros(Livro** livrosahemprestar, Exemplar** emprestar, int ID, int rga) {
    Livro* auxLivro = *livrosahemprestar;
    Exemplar* auxExemplar = *emprestar;

    if (auxLivro == NULL) {
        printf("Falha emprestarLivros\n");
        exit(EXIT_FAILURE);
    }

    // Encontrar o livro correspondente
    while (auxLivro && auxLivro->id != ID) {
        auxLivro = auxLivro->prox;
    }

    if (auxLivro && auxLivro->qtdisponivel > 0) {
        auxLivro->qtdisponivel--;

        // Procurar um exemplar disponível do livro
        while (auxExemplar && (auxExemplar->id != ID || auxExemplar->RGA != 0)) {
            auxExemplar = auxExemplar->prox;
        }

        if (auxExemplar) {
            auxExemplar->RGA = rga;
        } else {
            // Adicionar um novo exemplar, pois nenhum exemplar disponível foi encontrado
            Exemplar* novoExemplar = (Exemplar*)malloc(sizeof(Exemplar));
            if (!novoExemplar) {
                exit(EXIT_FAILURE);
            }

            novoExemplar->id = ID;
            strcpy(novoExemplar->titulo, auxLivro->titulo);
            strcpy(novoExemplar->autor, auxLivro->autor);
            novoExemplar->RGA = rga;
            novoExemplar->prox = *emprestar;
            *emprestar = novoExemplar;
        }
    } else {
        printf("Quantidade de Livros inexistentes ou indisponível\n");
    }
}
void registrarDevolucao(Livro** livro, Exemplar** emprest, int rga) {
    Livro* auxL;
    Exemplar* auxE = *emprest;
    Exemplar* anterior = NULL;
    Exemplar* lixo;

    while (auxE && auxE->RGA != rga) {
        anterior = auxE;
        auxE = auxE->prox;
    }

    if (auxE) {
        auxL = *livro;
        while (auxL && auxL->id != auxE->id) {
            auxL = auxL->prox;
        }

        if (auxL) {
            auxL->qtdisponivel++;
        }

        if (anterior) {
            anterior->prox = auxE->prox;
        } else {
            *emprest = auxE->prox;
        }

        free(auxE);
    } else {
        printf("Exemplar não encontrado na lista de emprestados\n");
    }
}

void imprimir_livro(Livro *lst) {
    Livro* p;
    for (p = lst; p != NULL; p = p->prox)
        printf("ID: %d | \"%s\" | \"%s\" | %d | Disponíveis: %d | Quantidade Total: %d\n", p->id, p->titulo, p->autor, p->anoPublicacao, p->qtdisponivel, p->qtdade);
}
void imprimir_exemplar(Exemplar *lst) {
    Exemplar* p;
    for (p = lst; p->prox != NULL; p = p->prox)
        printf("ID: %d | \"%s\" | \"%s\" | RGA: %d\n", p->id, p->titulo, p->autor, p->RGA);
}


int main(void) {
    Livro *Livros;
    Livros = (Livro *) malloc(sizeof (Livro));
    Livros->prox = NULL;

    Exemplar *Emprestimo;
    Emprestimo = (Exemplar *) malloc(sizeof (Exemplar));
    Emprestimo->prox = NULL;
    char comand;
    char titul[100];
    int RGA, ID;

    while (1) {
        scanf(" %c", &comand);  // Espaço antes do %c para ignorar espaços em branco

        switch (comand) {
            case 'A':
                scanf("%d \"%99[^\"]\" \"%49[^\"]\" %d %d", &ID, Livros->titulo, Livros->autor, &Livros->anoPublicacao, &Livros->qtdade);
                busca_insere(ID, Livros->titulo, Livros->autor, Livros->anoPublicacao, Livros->qtdade, &Livros);
                break;

            case 'E':
                scanf("%d %d", &ID, &RGA);
                emprestarLivros(&Livros, &Emprestimo,ID, RGA);
                break;

            case 'D':
                scanf("%d", &RGA);
                registrarDevolucao(&Livros, &Emprestimo, RGA);
                break;

            case 'P':
                imprimir_livro(Livros->prox);
                break;

            case 'R':
            {
              int x;
              scanf("%d", &x);
              busca_remove(x, &Livros);
              break;
            }

            case 'I':
                imprimir_exemplar(Emprestimo);
                break;
            case 'S':
                return 0;
        }
    }
}
